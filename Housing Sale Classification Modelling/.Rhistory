install.packages("party")
install.packages("C50")
install.packages("rpart")
install.packages("rpart.plot")
install.packages(c("cli", "commonmark", "crayon", "glue", "Rcpp", "renv", "rlang", "rmarkdown", "tidyselect", "withr", "xfun"))
file.exists("~/.ssh/id_rsa.pub")
file.exists("C:/Users/Spiddacino/.ssh/id_rsa.pub")
install.packages(c("broom", "broom.helpers", "car", "caret", "checkmate", "cli", "dichromat", "dplyr", "DT", "fansi", "future", "future.apply", "gdata", "geojsonsf", "ggplot2", "globals", "gmodels", "gt", "gtools", "gtsummary", "haven", "Hmisc", "httr", "knitr", "labelled", "leafem", "lme4", "magrittr", "maptools", "matrixStats", "multcomp", "nloptr", "openssl", "packrat", "parallelly", "party", "plyr", "processx", "ps", "psych", "quantreg", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "renv", "rmarkdown", "roxygen2", "rpart.plot", "rsconnect", "sass", "scales", "sp", "summarytools", "testthat", "TH.data", "tibble", "tinytex", "tseries", "tzdb", "usethis", "uuid", "vctrs", "xfun", "zoo"))
clear
setwd("~/GitHub/HousePricingAnalysis/Housing Sale Classification Modelling")
#import dataset
df<- read.csv("Classification+preprocessed+data+R.csv", header=TRUE)
glm.fit = glm(Sold~price, data = df, family = binomial)
View(df)
View(df)
#glm.fit = glm(Sold~price, data = df, family = binomial)
head(df)
View(df)
glm.fit = glm(Sold~price, data = df, family = binomial)
glm.fit = glm(Sold~Price, data = df, family = binomial)
head(df)
glm.fit = glm(Sold~i..price, data = df, family = binomial)
#import dataset
df_h<- read.csv("Classification+preprocessed+data+R.csv", header=TRUE)
head(df_h)
names(df)[1]<-paste("price")
head(df)
glm.fit = glm(Sold~price, data = df, family = binomial)
summary(glm.fit)
summary(glm.fit)
print(summary(glm.fit))
summary(glm.fit)
View(df_h)
glm.fit = glm(Sold~. , data = df, family = binomial)
summary(glm.fit)
gml.prob = predict(glm.fit, type = "response")
glm.prob[1:10]
glm.probs = predict(glm.fit, type = "response")
glm.probs[1:10]
#setting boundary value
glm.predict = rep("NO", 506)
glm.probs(glm.probs>0.5) = "YES"
#setting boundary value
glm.pred = rep("NO", 506)
glm.pred(glm.probs>0.5) = "YES"
#setting boundary value
glm.pred = rep("NO", 506)
glm.probs[1:10]
glm.pred[glm.probs>0.5] = "YES"
#create confusion matrix using table function
table(glm.pred, df$Sold)
